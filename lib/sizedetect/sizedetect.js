// Generated by CoffeeScript 1.3.1
(function() {
  var Capkom, Stat, StopWatch, _ref,
    _this = this;

  Capkom = (_ref = this.Capkom) != null ? _ref : this.Capkom = {};

  jQuery.widget("Capkom.sizedetect", {
    options: {
      profile: Capkom.profile,
      symbolLabel: "Catch me!",
      maxSize: 200,
      minSize: 100,
      clickCount: 5,
      timeout: 400,
      rootPrefix: '',
      result: function(bestSize, details) {
        var res, result, size;
        res = "<h2>Results</h2>";
        res += "Measured Sizes (these sizes depend from the screen size)";
        res += "<ul>";
        for (size in details) {
          result = details[size];
          res += "<li>\n  size: " + size + "px, score: " + (Math.round(result.score * 100)) + " %<br/>\n  Reaction time: average: " + result.reactionTimeAverage + ", standard deviation: " + result.reactionTimeStDev + "<br/>\n  Move time: average: " + result.moveTimeAverage + ", standard deviation: " + result.moveTimeStDev + "\n </li>";
        }
        res += "</ul>";
        res += "<p>Minimum size resulted in " + bestSize + "</p>";
        jQuery('#results').html(res);
        return this.console.info('ideal size:', size, 'detailed results:', details);
      },
      noclick: function(e) {
        return alert("You cannot use the computer with your current devices. Consult with Platus.");
      }
    },
    _create: function() {
      var _this = this;
      this._fixConsole();
      this.element.addClass('sizedetect-container');
      this._savedCSS = {
        position: this.element.css('position'),
        top: this.element.css('top'),
        bottom: this.element.css('bottom'),
        left: this.element.css('left'),
        right: this.element.css('right'),
        'z-index': this.element.css('z-index'),
        'background-color': this.element.css('background-color')
      };
      this.element.css({
        position: 'fixed',
        top: '5px',
        bottom: '5px',
        left: '5px',
        right: '5px',
        'background-color': '#fff',
        'z-index': 100
      });
      this.element.append("<div class='progressBar'></div>");
      this.progressBar = this.element.find(".progressBar");
      this.progressBar.css({
        'float': 'right',
        'width': '50%'
      });
      this.progressBar.progressbar();
      this.element.append("<button class='catchme'><img src='" + this.options.rootPrefix + "aron.png'/></button>");
      this.catchme = this.element.find('.catchme');
      this.console.info(this.catchme.button());
      this.catchme.find('.ui-button-text').css({
        'padding': 0
      });
      this.catchme.click(function(e) {
        e.stopPropagation();
        return _this._attempt(true);
      });
      this.catchme.css({
        cursor: "url(" + this.options.rootPrefix + "blank.cur), none"
      });
      this.element.css({
        cursor: "url(" + this.options.rootPrefix + "blank.cur), none"
      });
      this.element.append("<img class='custom-cursor' src='" + this.options.rootPrefix + "futter.png'/>");
      this.cursor = jQuery('.custom-cursor', this.element);
      this.cursor.css({
        position: 'absolute',
        top: 0,
        left: 0,
        'z-index': 10000,
        'pointer-events': 'none'
      });
      this.cursor.click(function(e) {
        _this.cursor.hide();
        console.info(e);
        jQuery(document.elementFromPoint(e.clientX, e.clientY)).trigger('click');
        _.defer(function() {
          return _this.cursor.show();
        });
        return false;
      });
      this.element.mouseout(function(e) {
        console.info('element out', 'e', e, 'e.relatedTarget', e.relatedTarget);
        if (!_this.catchme.has(e.relatedTarget)) {
          _this.cursor.hide();
        }
        return false;
      });
      this.element.mouseenter(function(e) {
        console.info('element enter', e);
        _this.cursor.show();
        return false;
      });
      this.element.mousemove(function(e) {
        console.info('element move');
        return _this.cursor.css({
          left: e.clientX - (_this.cursorsize / 2),
          top: e.clientY - (_this.cursorsize / 2)
        });
      });
      this.element.click(function(e) {
        return _this._attempt(false);
      });
      jQuery('body').bind('keyup', {
        widget: this
      }, this._escHandler);
      this.element.mousemove(function(e) {
        if (_this.notyetmoved) {
          _this.notyetmoved = false;
          _this.reactionTime = _this.reactionTimer.end();
          return _this.moveTimer.start();
        }
      });
      this.element.append('<div id="moveTime"></div>');
      this.element.append('<div id="reactionTime"></div>');
      this.details = {};
      this.moveTimer = new StopWatch;
      this.reactionTimer = new StopWatch;
      this.moveTimeStat = new Stat;
      this.reactionTimeStat = new Stat;
      return this._beginGame();
    },
    _destroy: function() {
      this.element.html("");
      this.element.removeClass('sizedetect-container');
      this.element.css(this._savedCSS);
      return jQuery('body').unbind('keyup', this._escHandler);
    },
    _beginGame: function() {
      var level;
      level = 2;
      while (Math.floor((Math.min(this.getInnerWidth(), this.getInnerHeight())) / level) > this.options.maxSize) {
        level++;
      }
      return this._newLevel(level - 1);
    },
    _newLevel: function(level) {
      if (this.size < this.options.minSize) {
        return this.finish();
      } else {
        this.level = level;
        this.size = Math.floor((Math.min(this.getInnerWidth(), this.getInnerHeight())) / this.level);
        this.cursorsize = this.size / 2;
        this.cursor.css({
          height: this.cursorsize,
          width: this.cursorsize
        });
        this.currentLevel = this.details[this.size.toString()] = [];
        this.progressBar.progressbar('value', 0);
        this.catchme.add('img', this.catchme).css({
          'width': this.size,
          'height': this.size
        });
        this.moveTimeStat.clear();
        this.reactionTimeStat.clear();
        this.console.info('new level started with symbol size', this.size);
        return this._newPosition();
      }
    },
    _newPosition: function() {
      var maxLeft, maxTop,
        _this = this;
      maxLeft = this.getInnerWidth() - this.size - 30;
      maxTop = this.getInnerHeight() - this.size - 30;
      this.catchme.css('left', Math.floor(Math.random() * maxLeft));
      this.catchme.css('top', Math.floor(Math.random() * maxTop));
      this.notyetmoved = true;
      this.reactionTimer.clearAndStart();
      return this.timeoutTimer = setTimeout(function() {
        return _this.timeout();
      }, this.options.timeout * 1000);
    },
    timeout: function() {
      return this.finish();
    },
    _attempt: function(succeeded) {
      var moveTime, progress;
      clearTimeout(this.timeoutTimer);
      if (succeeded) {
        moveTime = this.moveTimer.end();
        this.start = new Date().getTime();
        this.console.info('success', this.level, 'reactionTime:', this.reactionTime, 'moveTime:', moveTime);
        this.currentLevel.push({
          value: 1,
          moveTime: moveTime,
          reactionTime: this.reactionTime
        });
        this.reactionTimeStat.add(this.reactionTime);
        this.moveTimeStat.add(moveTime);
      } else {
        this.console.info('fail');
        this.currentLevel.push(0);
      }
      if (this.currentLevel.length >= this.options.clickCount) {
        this.evaluateCurrentLevel();
        if (this.currentLevel.score >= 0) {
          this.goodSize = this.size;
          this.console.info("goodSize is", this.goodSize, this);
          if (this.currentLevel.moveTimeAverage < 2000) {
            return this._newLevel(this.level + 2);
          } else {
            return this._newLevel(this.level + 1);
          }
        } else {
          return this.finish();
        }
      } else {
        progress = (this.currentLevel.length / this.options.clickCount) * 100;
        this.console.info('progress:', progress);
        this.progressBar.progressbar('value', Math.floor(progress));
        if (succeeded) {
          this.reactionTimer.clear();
          this.moveTimer.clear();
          return this._newPosition();
        }
      }
    },
    finish: function() {
      if (this.goodSize) {
        this.console.info('goodSize', this.goodSize, this);
        this.options.result.apply(this, [this.goodSize, this.details]);
      } else {
        this._trigger('noclick');
      }
      return this.destroy();
    },
    evaluateCurrentLevel: function() {
      var correct;
      correct = _.filter(this.currentLevel, function(r) {
        return r.value === 1;
      });
      this.currentLevel = this.details[this.size] = {
        score: correct.length / this.currentLevel.length,
        reactionTimeAverage: Math.round(this.reactionTimeStat.getAverage()),
        moveTimeAverage: Math.round(this.moveTimeStat.getAverage()),
        reactionTimeStDev: this.reactionTimeStat.getStandardDeviation(),
        moveTimeStDev: this.moveTimeStat.getStandardDeviation()
      };
      return this.console.info('level finished', this.level, this.currentLevel);
    },
    getInnerWidth: function() {
      return jQuery(window).width();
      if (jQuery.browser.msie) {
        return screen.availWidth;
      } else {
        return window.innerWidth;
      }
    },
    getInnerHeight: function() {
      return jQuery(window).height();
      if (jQuery.browser.msie) {
        return screen.availHeight;
      } else {
        return window.innerHeight;
      }
    },
    _fixConsole: function() {
      if (window.console) {
        return this.console = console;
      } else {
        return this.console = {
          info: function() {},
          error: function() {},
          log: function() {}
        };
      }
    },
    _escHandler: function(e) {
      if (e.keyCode === 27) {
        return e.data.widget.destroy();
      }
    }
  });

  Stat = (function() {

    Stat.name = 'Stat';

    function Stat(opts) {
      var options;
      options = {
        dropMargins: true
      };
      this.options = _.extend(options, opts);
      this._values = [];
    }

    Stat.prototype.getSamples = function() {
      var res;
      if (this.options.dropMargins) {
        res = _.sortBy(this._values, function(v) {
          return v;
        });
        return res.slice(1, -1);
      } else {
        return this._values;
      }
    };

    Stat.prototype.add = function(val) {
      return this._values.push(val);
    };

    Stat.prototype.length = function() {
      return this._values.length;
    };

    Stat.prototype.clear = function() {
      return this._values = [];
    };

    Stat.prototype.getAverage = function() {
      var smpls, sum;
      sum = 0;
      smpls = this.getSamples();
      _.each(smpls, function(val) {
        return sum += val;
      });
      return sum / smpls.length;
    };

    Stat.prototype.getVariance = function() {
      var av, smpls, v;
      av = this.getAverage();
      smpls = this.getSamples();
      v = 0;
      _.each(smpls, function(val) {
        return v += (av - val) * (av - val);
      });
      return v = v / smpls.length;
    };

    Stat.prototype.getStandardDeviation = function() {
      return Math.sqrt(this.getVariance());
    };

    return Stat;

  })();

  StopWatch = (function() {

    StopWatch.name = 'StopWatch';

    function StopWatch(error) {
      this.error = error != null ? error : function() {
        return this.console.error.apply(this.console, arguments);
      };
      this.elapsed = 0;
      this.status = 'idle';
    }

    StopWatch.prototype.start = function() {
      if (this.status === 'idle') {
        this.startTime = new Date().getTime();
        return this.status = 'running';
      } else {
        return this.error("Already running!");
      }
    };

    StopWatch.prototype.stop = function() {
      if (this.status === 'running') {
        this.elapsed += new Date().getTime() - this.startTime;
        return this.status = 'idle';
      } else {
        return this.error("Stop watch is not running, cannot stop!");
      }
    };

    StopWatch.prototype.clear = function() {
      this.elapsed = 0;
      return this.status = 'idle';
    };

    StopWatch.prototype.isRunning = function() {
      return this.status === 'running';
    };

    StopWatch.prototype.end = function() {
      var res;
      this.stop();
      res = this.elapsed;
      this.clear();
      return res;
    };

    StopWatch.prototype.clearAndStart = function() {
      this.clear();
      return this.start();
    };

    return StopWatch;

  })();

}).call(this);
